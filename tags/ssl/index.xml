<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSL on Funbox的技术记事本</title>
    <link>https://gofunbox.github.io/tags/ssl/</link>
    <description>Recent content in SSL on Funbox的技术记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 15 Dec 2017 07:08:59 +0000</lastBuildDate>
    
	<atom:link href="https://gofunbox.github.io/tags/ssl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx配置禁止IP直接HTTP/HTTPS访问</title>
      <link>https://gofunbox.github.io/nginx-ban-ip-access-for-http-https/</link>
      <pubDate>Fri, 15 Dec 2017 07:08:59 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/nginx-ban-ip-access-for-http-https/</guid>
      <description>这样配置可以禁止IP直接HTTP/HTTPS访问，也使未绑定的域名无法访问。
#http server { listen 80 default_server; server_name _; return 500; } #https server { listen 443 ssl default_server; server_name _; ssl_certificate /yourpath/ssl.crt; ssl_certificate_key /yourpath/ssl.key; return 500; }  需要配置秘钥 否则会到时全部ssl配置失效 不知道为啥
yum install -y openssl openssl genrsa -des3 -passout pass:x -out ssl.pass.key 2048 openssl rsa -passin pass:x -in ssl.pass.key -out ssl.key openssl req -new -key ssl.key -out ssl.csr …… 一路回车 …… openssl x509 -req -days 3650 -in ssl.csr -signkey ssl.</description>
    </item>
    
    <item>
      <title>Nginx SSL 性能优化</title>
      <link>https://gofunbox.github.io/nginx-ssl-performance-optimization/</link>
      <pubDate>Thu, 07 Dec 2017 07:41:45 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/nginx-ssl-performance-optimization/</guid>
      <description>禁用 SSLv3 协议 Google 的一个员工发现了 SSLv3 协议中一个名叫 Poodle 的漏洞，被证实为可以窃取加密的部分信息。这是一个协议层的漏洞，因此无法打补丁。
# nginx.conf http { ... ssl_prefer_server_ciphers on; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&#39;; ... }  添加 HSTS 响应头 Header HSTS 的 Header 告诉浏览器在指定的时间内，必须使用严格的 HTTPS 访问网站，即使是用户手动输入的 http:// 地址，也会被强制定向。
你也可以配置用 301 重定向 http 流量到 https，但是这个非加密的跳转过程随时可能被劫持。因此，HSTS 则告诉了浏览器在本地直接重定向 https。
在所需网站的 server { } 块儿里，添加这个头：
server { ... add_header Strict-Transport-Security &amp;quot;max-age=31536000;includeSubDomains&amp;quot;; ... }  如果你不需要所有的字域名也强启 HSTS，可以去掉 ;includeSubDomains 。
如果你想将自己的域名加入 HSTS Preload 名单直接内置于众多浏览器中，实现从第一次到最后一次都是 https 加密连接，可以到这里申请。</description>
    </item>
    
    <item>
      <title>HTTPS原理以及HTTPS中间人攻击</title>
      <link>https://gofunbox.github.io/security-https-and-mitm/</link>
      <pubDate>Wed, 16 Aug 2017 03:15:35 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/security-https-and-mitm/</guid>
      <description>https简介 http(Hyper Text Transfer Protocol)超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议,它是TCP/IP的上层协议,同时它也是万维网(万维网不等同于互联网,它只是基于互联网的一个服务)的数据通信的基础.
http协议是客户端浏览器与其他程序或Web服务器之间交互的应用层通讯协议.但它也有一个致命的缺点:http协议是明文传输协议,在传输信息的过程中并没有进行任何加密,通信的双方也没有任何的认证,这是非常不安全的,如果在通信过程中被中间人进行劫持、监听、篡改,会造成个人隐私泄露等严重的安全问题.
https就是用于解决这样的安全问题的,它的全称为Hypertext Transfer Protocol Secure,它在http的基础上添加了SSL(安全套接字层)层来保证传输数据的安全问题.
https提供了端对端的加密,而且不仅对数据进行了加密,还对数据完整性提供了保护.不过在讲解https的加密方式之前,我们需要先了解一下加密算法.
 对称加密 对称加密的基本思想是: 通信双方使用同一个密钥(或者是两个可以简单地互相推算的密钥)来对明文进行加密与解密.
常见的对称加密算法有DES、3DES、AES、Blowfish、IDEA、RC5、RC6.
  对称加密看起来很美好,但是密钥要怎么发送过去呢?如果直接发送过去,被中间人截获了密钥岂不是白费工夫.&amp;lt;/li&amp;gt; * 非对称加密 非对称加密也叫公开密钥加密,它使用了两个密钥,一个为公钥,一个为私钥,当一个用作于加密的时候,另一个则用作解密. 这两个密钥就算被其他人知道了其中一个也不能凭借它计算出另一个密钥,所以可以公开其中一个密钥(也就是公钥),不公开的密钥为私钥.   如果服务器想发送消息给客户端,只需要用客户端的公钥加密,然后客户端用它自己的私钥进行解密. 常见的非对称加密算法有RSA、DSA、ECDSA、 DH、ECDHE. 我们以DH算法为例,了解一下非对称加密的魅力.  
对称加密与非对称加密结合使用的方法虽然能够保证了通信过程的安全,但也引发了如下问题: * 客户端要如何获取到服务器的公钥? * 如果公钥在发送过程被中间人拦截,然后中间人发送自己的公钥给客户端,客户端该如何确认? 解决方法依是通过一个权威的CA(Certificate Authority)证书中心, * * * ## CA (Certificate Authority证书颁发机构) 它来负责颁发证书（声明这个公钥确实是服务端的）,这个证书包含了如下等内容: * 证书的发布机构. * 证书的有效期 * 公钥 * 证书所有人 * 数字签名 数字签名是用来验证数据完整性的，首先将公钥与个人信息用一个Hash算法生成一个消息摘要，Hash算法是不可逆的，且只要内容发生变化，那生成的消息摘要将会截然不同。然后CA再用它的私钥对消息摘要加密，最终形成数字签名。还把原始信息和数据签名合并，形成一个全新的东西，叫做“数字证书”  当客户端接收到证书时,只需要用同样的Hash算法再次生成一个消息摘要,然后用CA的公钥对证书进行解密,之后再对比两个消息摘要就能知道数据有没有被篡改过了.  那么CA的公钥又要从哪里来呢？这似乎陷入了一个鸡生蛋,蛋生鸡的悖论，其实CA也有证书来证明自己，而且CA证书的信用体系就像一棵树的结构，上层节点是信用高的CA同时它也会对底层的CA做信用背书，操作系统／浏览器中会内置一些顶层的CA的证书，相当于你自动信任了他们。这样通过各级实体证书的验证，逐渐上溯到链的终止点，即可信任的根CA，如果到达终点在自己的信任列表内未发现可信任的CA则认为此证书不可信。  验证证书链的时候，用上一级的公钥对证书里的签名进行解密，还原对应的摘要值，再使用证书信息计算证书的摘要值，最后通过对比两个摘要值是否相等，如果不相等则认为该证书不可信，如果相等则认为该级证书链正确，以此类推对整个证书链进行校验，引用高性能网络中的证书链校验图。 * * * ## Https的交互过程   1.</description>
    </item>
    
    <item>
      <title>解决PHP curl https时error 77(Problem with reading the SSL CA cert (path? access rights?))</title>
      <link>https://gofunbox.github.io/php-curl-https-error-77-problem-with-reading-the-ssl-ca-cert/</link>
      <pubDate>Tue, 08 Aug 2017 01:51:30 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/php-curl-https-error-77-problem-with-reading-the-ssl-ca-cert/</guid>
      <description>问题 服务器环境为CentOS，php-fpm，使用curl一个https站时失败，打开curl_error，捕获错误：Problem with reading the SSL CA cert (path? access rights?)
解决方案：  sudo yum install ca-certificates （无论有没有，安装确认一下） 重启php-fpm，这步比较重要，更改底层的东西时一定要重启一下 curl时设置：curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0)  相关知识点 什么是CA Certificates？ Certification authority (CA)
证书颁发机构（Certification authority 简称CA）证书是由CA向其自身或二级CA颁发的证书，用于在两个CA之间创建一个定义的关系。
由CA颁发给自己的证书称为受信任的根证书，因为它旨在为CA层次结构建立最终信任点。
一旦信任的根建立起来，它就可以用来授权下属的CA代表它颁发证书。
虽然CA之间的关系最常见是层次化的，CA证书也可以用于在两个不同的公钥基础设施（Public Key Infrastructure缩写PKI）层次结构中建立CA之间的信任关系。
在所有这些情况下，CA证书对于为PKI中使用的所有终端实体证书定义证书路径和使用限制至关重要。
CA证书解决的问题 当终端实体使用证书时，必须在终端实体证书和根CA之间验证信任关系。
根CA和终端实体证书之间的信任关系是通过验证证书链中所有证书的内容直到根CA来验证的。
为PKI建立的准则和程序定义了信任。这包括终端实体证书用于某些目的并阻止用于其他目的的能力。这些准则和程序以多种方式实施。例如，PKI的信任和安全可以通过两种方式建立：
 为确保承载CA的服务器的物理安全性而采取的步骤。 委派CA的管理角色的方式。  但是，针对组织需求的CA证书的适当配置是组织必须实施适当PKI安全性的最强大的工具之一。CA证书包含用于规范其颁发的CA的特殊配置数据。
这些配置选项可以：
 定义组织命名空间，由其发布和信任下属CA颁发的证书。 指定由下属CA颁发的证书的可接受使用。 定义必须遵循的发布准则，以便下属CA颁发的证书被视为有效。 在单独的认证层次之间创建一个托管信任。  参考
https://technet.microsoft.com/en-us/library/cc778623(v=ws.10).aspx</description>
    </item>
    
    <item>
      <title>Let’s Encrypt，给自己的博客加https</title>
      <link>https://gofunbox.github.io/letsencrypt-nginx-https/</link>
      <pubDate>Wed, 19 Oct 2016 13:02:06 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/letsencrypt-nginx-https/</guid>
      <description>对Let&amp;#8217;s Encrypt免费项目早有耳闻，今天终于给自己的博客加上https。
Let&amp;#8217;s Encrypt是国外一个公共的免费SSL项目，由 Linux 基金会托管，它的来头不小，由Mozilla、思科、Akamai、IdenTrust和EFF等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由HTTP过渡到HTTPS，目前Facebook等大公司开始加入赞助行列。
Let&amp;#8217;s Encrypt已经得了 IdenTrust 的交叉签名，这意味着其证书现在已经可以被Mozilla、Google、Microsoft和Apple等主流的浏览器所信任，你只需要在Web 服务器证书链中配置交叉签名，浏览器客户端会自动处理好其它的一切，Let&amp;#8217;s Encrypt安装简单，未来大规模采用可能性非常大。
旧版的安装方式，新版往下拉~
获取证书，非常的简单，但由于国内网络的原因，会比较慢一些
git clone https://github.com/letsencrypt/letsencrypt cd letsencrypt #每个-d参数后面跟一个域名，需要申请几个域名的证书就跟几个，需要确认这些域名都解析到当前vps的ip上 ./letsencrypt-auto certonly --standalone -d example.com -d www.example.com  完成后会有如下提示：
Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/example.com/fullchain.pem. Your cert will expire on xxxx-xx-xx. To obtain a new version of the certificate in the future, simply run Let&#39;s Encrypt again.  但过程并非那么顺利，报错了，跟我的屌丝配置内存512M有关~~~
Error: open CFI at the end of file; missing .</description>
    </item>
    
  </channel>
</rss>