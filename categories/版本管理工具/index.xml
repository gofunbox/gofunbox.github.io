<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>版本管理工具 on Funbox的技术记事本</title>
    <link>https://ifunbox.top/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 版本管理工具 on Funbox的技术记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 04 Sep 2017 07:37:26 +0000</lastBuildDate><atom:link href="https://ifunbox.top/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字符编码简介（ASCII、Unicode、UTF-8）</title>
      <link>https://ifunbox.top/ascii-unicode-utf8/</link>
      <pubDate>Mon, 04 Sep 2017 07:37:26 +0000</pubDate>
      
      <guid>https://ifunbox.top/ascii-unicode-utf8/</guid>
      <description>字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。
因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。
由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。
但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。
你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。
现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
字母A用ASCII编码是十进制的65，二进制的01000001；
字符0用ASCII编码是十进制的48，二进制的00110000，注意字符’0’和整数0是不同的；
汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。
你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。
新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：
   字符 ASCII Unicode UTF-8     A 01000001 00000000 01000001 01000001   中 x 01001110 00101101 11100100 10111000 10101101    从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。
搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：
浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：
所以你看到很多网页的源码上会有类似的信息，表示该网页正是用的UTF-8编码。
转自 字符编码</description>
    </item>
    
    <item>
      <title>centos搭建Git服务器</title>
      <link>https://ifunbox.top/centos_git_configuration/</link>
      <pubDate>Sun, 06 Sep 2015 09:46:07 +0000</pubDate>
      
      <guid>https://ifunbox.top/centos_git_configuration/</guid>
      <description>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。假设你已经有sudo权限的用户账号，下面，正式开始安装。第一步，安装git：&amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;yum install -y git&amp;amp;lt;/span&amp;gt; 第二步，创建一个git用户，用来运行git服务：&amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;adduser git -d /home/git/ -s /usr/bin/git-shell&amp;amp;lt;/span&amp;gt; 第三步，创建证书登录：收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。&amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;[ssh-keygen -t rsa -C &amp;quot;name@baidu.com&amp;quot;]&amp;amp;lt;/span&amp;gt; 第四步，初始化Git仓库：先选定一个目录作为Git仓库，假定是/home/git/sample.git，在/home/git目录下输入命令：&amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;sudo git init --bare sample.git&amp;amp;lt;/span&amp;gt; Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：&amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;sudo chown -R git:git sample.git&amp;amp;lt;/span&amp;gt; 第五步，禁用shell登录：出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：第六步，克隆远程仓库：现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</description>
    </item>
    
    <item>
      <title>Linux下SVN安装配置以及使用</title>
      <link>https://ifunbox.top/linux_svn_configuration/</link>
      <pubDate>Sat, 18 May 2013 08:07:03 +0000</pubDate>
      
      <guid>https://ifunbox.top/linux_svn_configuration/</guid>
      <description>第一章 安装1. 采用源文件编译安装。源文件共两个，为：subversion-1.6.21.tar.gz （subversion 源文件）subversion-deps-1.6.21.tar.gz （subversion依赖文件）注意文件版本必须一致,否则很容易产生各种奇怪的问题.2. 上传以上两个文件到服务器上，解压。解压命令为： &amp;lt;td&amp;gt; &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;tar&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;xfvz subversion-1.6.21.&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;tar&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;.gz &amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;tar&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;xfvz subversion-deps-1.6.21.&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;tar&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;.gz&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt;  指令简介：tar 为解压命令，xfvz为tar命令的参数，用于解压tar.gz格式压缩的文件。3. 解压后生成 subversion-1.6.21 子目录，两个压缩包解压后都会自动放到此目录下，不用手动更改。4. 进入解压子目录： &amp;lt;td&amp;gt; &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;cd&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;subversion-1.6.21&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt;  5. 执行 ./configure –prefix=/opt/subversion 进行配置设定并指明安装目录. 注意prefix前是两个减号. 默认不带BDB包, 所以默认使用的是FSFS模式. 若想使用BDB模式需另外下载BDB包.建议使用FSFS模式.两种模式比较参考以下链接:http://doc.iusesvn.com/show-21-1.html指令简介：configure命令用于检查安装平台和目标特征，prefix用于指定路径。6. 执行 make 编译.7. 执行 make install 安装.8. 添加环境变量: &amp;lt;td&amp;gt; &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;vi&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;/etc/profile&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt;  在文件最后加入:export PATH=$PATH:/usr/local/svn/bin9.</description>
    </item>
    
    <item>
      <title>SVN菜单中文详解</title>
      <link>https://ifunbox.top/459.html</link>
      <pubDate>Tue, 19 Feb 2013 01:43:09 +0000</pubDate>
      
      <guid>https://ifunbox.top/459.html</guid>
      <description>01、SVN Checkout(SVN取出)点击SVN Checkout，弹出检出提示框，在URL of repository输入框中输入服务器仓库地址，在Checkout directory输入框中输入本地工作拷贝的路径，点击确定，即可检出服务器上的配置库。02、SVN Update(SVN更新)如果配置库在本地已有工作拷贝，则取得最新版本只是执行SVN Update即可，点击SVN Update，系统弹出更新提示框，点击确定，则把服务器是最新版本更新下来03、Import（导入）选择要提交到服务器的目录，右键选择TortoiseSVN—-Import，系统弹出导入提示框，在URL of repository输入框中输入服务器仓库地址，在Import Message输入框中输入导入日志信息，点击确定，则文件导入到服务器仓库中。04、Add(加入)如果有多个文件及文件夹要提交到服务器，我们可以先把这些要提交的文件加入到提交列表中，要执行提交操作，一次性把所有文件提交，如图，可以选择要提交的文件，然后点击执行提交（SVN Commit）,即可把所有文件一次性提交到服务器上05、Resolving Conflicts(解决冲突)有时你从档案库更新文件会有冲突。冲突产生于两人都修改文件的某一部分。解决冲突只能靠人而不是机器。当产生冲突时，你应该打开冲突的文件，查找以&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt;开始的行。冲突部分被标记：&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; filenameyour changes=======code merged from repository&amp;raquo;&amp;raquo;&amp;raquo;&amp;gt; revisionSubversion为每个冲突文件产生三个附加文件：filename.ext.mine更新前的本地文件。filename.ext.rOLDREV你作改动的基础版本。filename.ext.rNEWREV更新时从档案库得到的最新版本。使用快捷菜单的编辑冲突Edit Conflict命令来解决冲突。然后从快捷菜单中执行已解决Resolved命令，将改动送交到档案库。请注意，解决命令并不解决冲突，而仅仅是删除filename.ext.mineandfilename.ext.r*文件并允许你送交。06、Check for Modifications（检查更新）点击Check for Modifications,系统列表所以待更新的文件及文件夹的状态.07、Revision Graph(版本分支图)查看文件的分支,版本结构,可以点击Revision Graph,系统以图形化形式显示版本分支.08、Rename(改名)SVN支持文件改名,点击Rename,弹出文件名称输入框,输入新的文件名称,点击确定,再把修改提交,即可完成文件改名09、Delete(删除)SVN支持文件删除,而且操作简单,方便,选择要删除的文件,点击Delete,再把删除操作提交到服务器10、Moving(移动)选择待移动的文件和文件夹；按住右键拖动right-drag文件（夹）到跟踪拷贝内的新地方；松开左键；在弹出菜单中选择move files in Subversion to here11、Revert(还原)还原操作,如刚才对文件做了删除操作,现在把它还原回来,点击删除后,再点击提交,会出现如上的提示框,点击删除后,再点击Revert,即已撤销删除操作,如果这时候点击提交,则系统弹出提示框:没有文件被修改或增加,不能提交12、Branch/Tag(分支/标记)当需要创建分支，点击Branch/Tag，在弹出的提示框中，输入分支文件名，输入日志信息，点击确定，分支创建成功，然后可查看文件的版本分支情况13、Switch(切换)文件创建分支后，你可以选择在主干工作，还是在分支工作，这时候你可以通过Switch来切换。14、Merge(合并)主干和分支的版本进行合并，在源和目的各输入文件的路径，版本号，点击确定。系统即对文件进行合并，如果存在冲突，请参考冲突解决。15、Export(导出)把整个工作拷贝导出到本地目录下,导出的文件将不带svn文件标志,文件及文件夹没有绿色的”√”符号标志。16、Relocate(重新定位)当服务器上的文件库目录已经改变，我们可以把工作拷贝重新定位，在To URL输入框中输入新的地址17、Add to Ignore List(添加到忽略列表)大多数项目会有一些文件（夹）不需要版本控制，如编译产生的*.obj, *.lst,等。每次送交，TortoiseSVN提示那些文件不需要控制，挺烦的。这时候可以把这些文件加入忽略列表。18、SVN其它相关功能客户端修改用户密码:打开浏览器,在地址栏内输入http://192.168.1.250/cgi-bin/ChangePasswd,启动客户端修改用户密码的界面,输入正确的用户名,旧密码,新密码(注意密码的位数应该不小于6,尽量使用安全的密码),点击修改即可.19、SVN Commit（版本提交）把自己工作拷贝所做的修改提交到版本库中，这样别人在获取最新版本(Update)的时候就可以看到你的修改了。20、Show log（显示日志）显示当前文件(夹)的所有修改历史。SVN支持文件以及文件夹独立的版本追溯。21、Repo-Browser（查看当前版本库）查看当前版本库，这是TortoiseSVN查看版本库的入口，通过这个菜单项，我们就可以进入配置库的资源管理器，然后就可以对配置库的文件夹进行各种管理，相当于我们打开我的电脑进行文件管理一样。22、Revision Graph（版本图形）查看当前项目或文件的修订历史图示。如果项目比较大型的话，一般会建多个分支，并且多个里程碑（稳定版本发布），通过这里，我们就可以看到项目的全貌。23、Resolved（解决冲突）如果当前工作拷贝和版本库上的有冲突，不能自动合并到一起，那么当你提交修改的时候，tortoisesvn就会提示你存在冲突，这时候你就可以通过这个菜单项来解决冲突。冲突的解决有两种，一种是保留某一份拷贝，例如使用配置库覆盖当前工作拷贝，或者反过来。还有一种是手动解决冲突，对于文本文件，可以使用tortoiseSVN自带的工具，它会列出存在冲突的地方，然后你就可以和提交者讨论怎么解决这个冲突。同时它也对Word有很好的支持24、Update to Revision(更新至版本)从版本库中获取某一个历史版本。这个功能主要是方便查看历史版本用，而不是回滚版本。注意：获取下来之后，对这个文件不建议进行任何操作。如果你做了修改，那么当你提交的时候SVN会提示你，当前版本已失效（即不是最新版本），无法提交，需要先update一下。这样你所做的修改也就白费了。25、Revert（回滚）如果你对工作拷贝做了一些修改，但是你又不想要了，那么你可以使用这个选项把所做的修改撤销26、Cleanup（清除状态）如果当前工作拷贝有任何问题的话，可以使用这个选项进行修正。例如，有些文件原来是版本控制的，但是你没有通过tortoiseSVN就直接删除了，但是tortoiseSVN还是保留着原来的信息（每个文件夹下都有一个.svn的隐藏文件夹，存放着当前文件夹下所有文件夹的版本信息）所以这就会产生一些冲突。可以使用cleanup来清理一下。27、GetLock/ReleaseLock（加锁/解锁）如果你不想别人修改某个文件的话，那么你就可以把这个文件进行加锁，这样可以保证只有你对这个文件有修改权。除非你释放了锁，否则别人不可能提交任何修改到配置库中28、Branch/tag（分支/标签）Branch是分支的意思。例如当在设计一个东西的时候，不同的人有不同的实现，但是没有经过实践检验，谁也不想直接覆盖掉其他人的设计，所以可以引出不同的分支。将来如果需要，可以将这些分支进行合并。tag是打标签的意思。通常当项目开发到一定程度，已经可以稳定运行的时候，可以对其打上一个标签，作为稳定版。将来可以方便的找到某个特定的版本（当然我们也可以使用版本号来查找，但是数字毕竟不方便）SVN对于分支和标签都是采用类似Linux下硬链接的方式（同一个文件可以存在两个地方，删除一个不会影响另一个，所做修改会影响另一个），来管理文件的，而不是简单的复制一份文件的拷贝，所以不会有浪费存储空间的问题存在。29、Export（导出）这个功能是方便我们部署用。当我们需要发布一个稳定版本时，就可以使用这个功能将整个工程导出到某个文件夹，新的文件夹将不会包含任何版本信息了。30、Relocate（版本库转移）当我们版本库发生转移的时候就需要用到这个功能了。例如我原先的版本库是建在U盘上的，现在转移到（复制整个配置库文件夹）开发服务器上，使用https代替文件系统的访问。因此就需要将原来的工作拷贝的目标版本库重新定位到开发服务器上。31、create patch（创建补丁）创建补丁。如果管理员不想让任何人都随便提交修改，而是都要经过审核才能做出修改，那么其他人就可以通过创建补丁的方式，把修改信息（补丁文件）发送给管理员，管理员审核通过之后就可以使用apply patch提交这次修改了</description>
    </item>
    
    <item>
      <title>Windows 7中虚拟机VMware无线网络图文配置教程</title>
      <link>https://ifunbox.top/181.html</link>
      <pubDate>Sun, 13 Nov 2011 13:22:39 +0000</pubDate>
      
      <guid>https://ifunbox.top/181.html</guid>
      <description>看完全文，我想你应该就懂虚拟机VMware网络配置了，保持你的耐心吧。我的网络适配器如下成功用虚拟机VMware网络配置的前提条件：首先，设备管理器里面要有VMware Virtual Ethernet Adapter for VMnet1和VMware Virtual Ethernet Adapter for VMnet8(其实只需要8，不需要1也行)。且显示无问题。如下图所示：其次，控制面板\网络和共享中心-&amp;gt;网络连接里面，你的网卡属性里面(这边我用无线上网所以右键属性打开)，VMware Bridge Protocol协议打钩(这边要注意是你的物理网卡，而不是虚拟网卡的属性，虚拟网卡可以不打勾)如果上述必要设置有问题，只要重新安装下VMware，或者选择修复安装，一般问题都会解决。虚拟机VMware网络配置的详细步骤：(以下设置最好是都用管理员身份运行)1、打开VMware Workstation菜单栏编辑-&amp;gt;虚拟网络编辑器（Virtual Network Editor）2、选中VMnet8，类型NAT,记下下面的Gateway IP Address，比如说我的就是192.168.32.0;然后打开NAT设置，记下里面的网关:192.168.32.23、打开DHCP标签页，记下Start IP Address和End IP Address，比如说我的就是192.168.32.128和192.168.32.2544、关闭VMware，Virtual Network Editor，运行VMware Workstation，在菜单栏中，选择虚拟机-&amp;gt;设置下的网络适配器运行方式为第二种(NAT:Used to share the host’s IP address5、启动虚拟机，比如说我的是Centos6.0，并打开网络设置6、更改本地连接属性里面的TCP/IP属性，选择使用下面的IP地址，其中，IP Address填刚才DHCP页面里面记下的两个IP地址中的随便一个IP，也就是说从192.168.32.128到192.168.32.254，随便选一个，我选的是192.168.32.202。子网掩码（Netmask）是自动填的255.255.255.0，默认网关（Gateway）和下面的DNS是填刚才NAT页面记下的IP，比如我的是192.168.32.2。7、打开浏览器，输入 http://www.fanhefan.com/,能上网了。一台:192.168.32.202 数据库服务器一台:192.168.32.203 应用程序和前端服务器203与202不同的地方时203 的多配置一个DNS,ip位202的这样以后，IE连接使用了代理就能外网，但是不能连接数据库，否则能连接数据库，不能上外网，解决方案：点击代理后面的 高级–&amp;gt;例外情况中输入你的数据库服务器的Ip地址是不OK得，输入数据库服务器的名称，OK于是你的203能够连接数据库又能够上外网了。希望能够给大家带来帮助。以下就是本文给出的VMware虚拟机网络设置：VMware虚拟机网络设置之1.bridge :默认使用vmnet0将虚拟机的ip设置与主机同网段未使用ip,其余与主机相同:例如主机ip是10.70.54.31,设置虚拟机ip为10.70.54.22。netmask,broadcast,gateway,dns都与主机相同即可实现虚拟机&amp;lt;—&amp;gt;主机 虚拟机&amp;lt;—-&amp;gt;互联网 通信。VMware虚拟机网络设置之2.nat :默认使用vmnet8将虚拟机设置成使用dhcp方式上网,windows下选择”自动获取ip”,linux下开启dhcp服务即可也可以手动设置:ip设置与vmnet8同网段,gateway设置成vmnet8的gateway(/etc/VMware/vmnet8/nat/nat.conf)中可以查到vmnet8的gateway,通常是xxx.xxx.xxx.2。netmask,broadcast设置与vmnet8相同,dns设置与主机相同。例如 vmnet8 ip:172.16.249.1 gw :172.16.249.2虚拟机设置: ip :172.16.249.100 gw: 172.16.249.2VMware虚拟机网络设置之3.host-only :默认使用vmnet1将虚拟机ip设置与vmnet1同网段,gateway设置成vmnet1的ip,其余设置与vmnet1相同,dns设置与主机相同例如 vmnet1 ip :172.16.245.1VMware虚拟机网络设置: ip :172.16.245.100 gateway :172.16.245.1这样就实现了虚拟机&amp;lt;—&amp;gt;主机 通信,但是 虚拟机&amp;lt;—&amp;gt;互联网 仍无法通信虚拟机与互联网通信：1.开启主机路由功能2.设定iptables，使主机成为一台nat server1. echo 1 &amp;gt;/proc/sys/net/ipv4/ip_forward 这样就主机就具有了路由功能2. iptables -t nat -A POSTROUTING -o eth0 -s 172.</description>
    </item>
    
  </channel>
</rss>
