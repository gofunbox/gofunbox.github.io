<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on Funbox的技术记事本</title>
    <link>https://ifunbox.top/categories/mysql/</link>
    <description>Recent content in Mysql on Funbox的技术记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 01 Dec 2020 05:01:59 +0000</lastBuildDate>
    
	<atom:link href="https://ifunbox.top/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql数据误删除的恢复，drop表或库的恢复</title>
      <link>https://ifunbox.top/mysql-data-recovery/</link>
      <pubDate>Tue, 01 Dec 2020 05:01:59 +0000</pubDate>
      
      <guid>https://ifunbox.top/mysql-data-recovery/</guid>
      <description>误删除几条数据 执行delete的恢复方法 用mysql自身自带的工具，提取出binlog日志进行分析
mysqlbinlog --base64-output=decode-rows -v --start-datetime=&amp;quot;2017-11-01 00:00:00&amp;quot; --stop-datetime=&amp;quot;2017-11-11 00:00:00&amp;quot; --database=test mysql-bin.000012 &amp;gt; aaa.sql  输出内容大致如下:
#171008 12:35:19 server id 1 &amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:#ff0000;&amp;quot;&amp;gt;end_log_pos 69295&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt; CRC32 0x015beaa8 Query thread_id=1 exec_time=0 error_code=0 SET TIMESTAMP=1507437319/*!*/; COMMIT ## end_log_pos 为标识点，需要注意  然后，根据实际情况，找到自己误操作的起始点和结束点， 就是两个end_log_pos的值。然后导出为sql文件，需要将sql文件反写，也就是insert变成delete等，可以参考使用binlog2sql工具。
mysqlbinlog --start-position=123212(起始点) --stop-position=3333333(结束点) --database=test mysql-bin.000012 &amp;gt; restore.sql ## 起始点结束点则是操作的 end_log_pos值  ps： 另外，&amp;ndash;start-position 指定的end_log_pos是不会被提取的，会从指定的这个end_log_pos的下一条日志开始。 但 &amp;ndash;stop-position 指定的end_log_pos是会被提取出来的。大家提取指定节点之间的操作日志时需要注意。
然后执行：
mysql [-f] -u root -p &amp;lt; restore_fanxie.sql ## 执行导出的sql文件的反写sql，怎么反写可以自己手动也可以用工具：binlog2sql  -f : 这个为忽略错误，继续执行的参数，可以根据情况确定是否使用。</description>
    </item>
    
    <item>
      <title>MySQL参数：innodb_flush_log_at_trx_commit 和 sync_binlog</title>
      <link>https://ifunbox.top/innodb_flush_log_at_trx_commit-sync_binlog/</link>
      <pubDate>Tue, 01 Dec 2020 03:01:59 +0000</pubDate>
      
      <guid>https://ifunbox.top/innodb_flush_log_at_trx_commit-sync_binlog/</guid>
      <description>innodb_flush_log_at_trx_commit 和 sync_binlog 是 MySQL 的两个配置参数，前者是 InnoDB 引擎特有的。之所以把这两个参数放在一起讨论，是因为在实际应用中，它们的配置对于 MySQL 的性能有很大影响。
innodb_flush_log_at_trx_commit 简而言之，innodb_flush_log_at_trx_commit 参数指定了 InnoDB 在事务提交后的日志写入频率。这么说其实并不严谨，且看其不同取值的意义和表现。
当 innodb_flush_log_at_trx_commit 取值为 0 的时候，log buffer 会 每秒写入到日志文件并刷写（flush）到磁盘。但每次事务提交不会有任何影响，也就是 log buffer 的刷写操作和事务提交操作没有关系。在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。 当取值为 1 时，每次事务提交时，log buffer 会被写入到日志文件并刷写到磁盘。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。 当取值为 2 时，每次事务提交会写入日志文件，但并不会立即刷写到磁盘，日志文件会每秒刷写一次到磁盘。这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。 上面说到的「最后 1s」并不是绝对的，有的时候会丢失更多数据。有时候由于调度的问题，每秒刷写（once-per-second flushing）并不能保证 100% 执行。对于一些数据一致性和完整性要求不高的应用，配置为 2 就足够了；如果为了最高性能，可以设置为 0。有些应用，如支付服务，对一致性和完整性要求很高，所以即使最慢，也最好设置为 1.
sync_binlog sync_binlog 是 MySQL 的二进制日志（binary log）同步到磁盘的频率。MySQL server 在 binary log 每写入 sync_binlog 次后，刷写到磁盘。
如果 autocommit 开启，每个语句都写一次 binary log，否则每次事务写一次。默认值是 0，不主动同步，而依赖操作系统本身不定期把文件内容 flush 到磁盘。设为 1 最安全，在每个语句或事务后同步一次 binary log，即使在崩溃时也最多丢失一个语句或事务的日志，但因此也最慢。</description>
    </item>
    
    <item>
      <title>MySQL锁</title>
      <link>https://ifunbox.top/time-complexity/</link>
      <pubDate>Tue, 01 Dec 2020 03:01:59 +0000</pubDate>
      
      <guid>https://ifunbox.top/time-complexity/</guid>
      <description>表锁 一般在执行 DDL 语句时，譬如 ALTER TABLE 就会对整个表进行加锁
mysql&amp;gt; lock table products read; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select * from products where id = 100; mysql&amp;gt; unlock tables; Query OK, 0 rows affected (0.00 sec)   我们会在会话开始的地方使用 lock 命令将后面所有要用到的表加上锁，在锁释放之前，我们只能访问这些加锁的表，不能访问其他的表，最后通过 unlock tables 释放所有表锁。这样的好处是，不会发生死锁！
对于读锁 * 持有读锁的会话可以读表，但不能写表； * 允许多个会话同时持有读锁； * 其他会话就算没有给表加读锁，也是可以读表的，但是不能写表； * 其他会话申请该表写锁时会阻塞，直到锁释放。
对于写锁 * 持有写锁的会话既可以读表，也可以写表； * 只有持有写锁的会话才可以访问该表，其他会话访问该表会被阻塞，直到锁释放； * 其他会话无论申请该表的读锁或写锁，都会阻塞，直到锁释放。
锁的释放规则如下 * 使用 UNLOCK TABLES 语句可以显示释放表锁； * 如果会话在持有表锁的情况下执行 LOCK TABLES 语句，将会释放该会话之前持有的锁； * 如果会话在持有表锁的情况下执行 START TRANSACTION 或 BEGIN 开启一个事务，将会释放该会话之前持有的锁； * 如果会话连接断开，将会释放该会话所有的锁。</description>
    </item>
    
  </channel>
</rss>