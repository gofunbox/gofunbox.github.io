<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Funbox的技术记事本</title>
    <link>https://gofunbox.github.io/categories/linux/</link>
    <description>Recent content in Linux on Funbox的技术记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 06 Dec 2017 09:26:00 +0000</lastBuildDate>
    
	<atom:link href="https://gofunbox.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 添加开机启动项的三种方法</title>
      <link>https://gofunbox.github.io/linux-autostart-method/</link>
      <pubDate>Wed, 06 Dec 2017 09:26:00 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux-autostart-method/</guid>
      <description>linux 添加开机启动项的三种方法。
 编辑文件 /etc/rc.local 输入命令：vim /etc/rc.local 将出现类似如下的文本片段：
#!/bin/sh # # This script will be executed *after* all the other init scripts. # You can put your own initialization stuff in here if you don&#39;t # want to do the full Sys V style init stuff. touch /var/lock/subsys/local /etc/init.d/mysqld start #mysql开机启动 /etc/init.d/nginx start #nginx开机启动 /etc/init.d/php-fpm start #php-fpm开机启动 /etc/init.d/memcached start #memcache开机启动 #在文件末尾（exit 0之前）加上你开机需要启动的程序或执行的命令即可（执行的程序需要写绝对路径，添加到系统环境变量的除外），如： /usr/local/thttpd/sbin/thttpd -C /usr/local/thttpd/etc/thttpd.conf  自己写一个shell脚本 将写好的脚本（.sh文件）放到目录 /etc/profile.d/ 下，系统启动后就会自动执行该目录下的所有shell脚本。</description>
    </item>
    
    <item>
      <title>Vim 编辑器简单使用教程</title>
      <link>https://gofunbox.github.io/vim-guide/</link>
      <pubDate>Fri, 25 Aug 2017 06:59:23 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/vim-guide/</guid>
      <description>模式切换    当前模式 切换为 按键 说明     其它模式 普通模式 Esc    普通模式 插入模式 i 在光标前插入     I 在行首插入     a 在光标后插入     A 在行末插入     o 在当前行之下新建行     O 在当前行之上新建行     r 替换当前字符     R 从当前字符开始替换   普通模式 命令模式 :    普通模式 可视模式 v 可视模式     V 可视行模式     Ctrl+v 可视块模式    移动 在普通模式中，您可以使用以下方式移动光标</description>
    </item>
    
    <item>
      <title>自动化编译 如何生成configure和Makefile</title>
      <link>https://gofunbox.github.io/automake-and-makefile/</link>
      <pubDate>Tue, 22 Aug 2017 09:54:09 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/automake-and-makefile/</guid>
      <description>在前面的标准编译安装中，第一步是./configure，它会根据Makefile.in生成Makefile文件，然后make根据Makefile自动编译软件
通常在一个源码包中，已经包含了configure脚本和Makefile文件，作为课外知识，我们大致了解一下怎么生成这两个文件
autoconf autoconf用来生成configure脚本，它可以检查系统特性、编译环境、环境变量、软件参数、依赖关系等
autoconf需要用到 m4
 用autoscan描源代码目录生成configure.scan文件 将configure.scan改名为configure.in 用aclocal根据configure.in文件的内容，自动生成aclocal.m4文件 使用autoconf，根据configure.in和aclocal.m4来产生configure文件  automake automake可以从Makefile.am文件自动生成Makefile.in，它主要用来配置源代码
automake需用到perl
 手工写Makefile.am 使用automake，根据configure.in和Makefile.am来产生Makefile.in  Makefile 使用configure脚本，配合Makefile.in可以生成Makefile文件，然后用make自动化的编译软件
这里有一张生成Makefile的流程图：
Makefile的用途不只是编译软件，还可以利用它完成一些琐碎的工作，只要最后输出一个文件，都可以用make来完成
使用 make 利用 configure所产生的Makefile文件有几个预先设定的目标可供使用：
   目标 用途     make all 产生预设的目标，只敲入make也可以   make clean 清除编译结果   make distclean 除了清除编译结果，也把configure所产生的 Makefile 清除掉   make install 将程序安装到系统中   make dist 将程序和相关的文档打包为一个压缩文档以供发布   make distcheck 打包并检验    详细参考</description>
    </item>
    
    <item>
      <title>CentOS CLI命令行mailx发送邮件基本用法</title>
      <link>https://gofunbox.github.io/centos-cli-mailx/</link>
      <pubDate>Tue, 15 Aug 2017 06:50:01 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/centos-cli-mailx/</guid>
      <description>mailx安装，很简单！貌似我的系统自带的。
yum install mailx #安装 yum remove mailx #卸载系统自带的旧版mailx 编译安装mailx： http://nchc.dl.sourceforge.net/project/heirloom/heirloom-mailx/12.4/mailx-12.4.tar.bz2 tar jxvf mailx-12.4.tar.bz2 #解压 cd mailx-12.4 #进入目录 make #编译 make install UCBINSTALL=/usr/bin/install #安装 ln -s /usr/local/bin/mailx /bin/mail #创建mailx到mail的软连接 ln -s /etc/nail.rc /etc/mail.rc #创建mailx配置文件软连接  我先介绍下系统的版本和mailx的版本
[root@localhost ~]# mailx -V 12.4 7/29/08 [root@localhost ~]# cat /etc/issue CentOS release 6.8 (Final) Kernel \r on an \m  mailx的配置文件在/etc/mail.rc
在配置文件中添加下面的代码（passwd写开通smtp客户端给的授权码）
set from=111******53@qq.com set smtp=smtp.qq.com set smtp-auth-user=111******53@qq.com set smtp-auth-password=euia********chb #授权码 set smtp-auth=login  直接报错了(没有使用ssl的节奏)</description>
    </item>
    
    <item>
      <title>监控PHP fatal errors错误日志发送邮件</title>
      <link>https://gofunbox.github.io/monitor-php-error-log-sendmail/</link>
      <pubDate>Mon, 07 Aug 2017 09:17:46 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/monitor-php-error-log-sendmail/</guid>
      <description>最近自己搞的小项目php报错几天后才被人发现，看来来个监控十分重要了。需要自动监控error_log一有新错误发送邮件通知下技术员，发现SEC -simple event correlator这个强大稳定的工具可以满足我的需要。
SEC是一个Perl脚本（〜11k行代码！），当有致命错误时，SEC会向您发送通知。可以使用正则表达式来查找需要发送的内容。所以您可以将其用于更复杂的设置，如应用程序日志或Web服务器访问日志~~~
 安装 EPEL 资源 sudo yum install epel-release 
 安装SEC yum install sec 
 配置SEC vim /etc/sec/php.conf
  type=Single ptype=RegExp pattern=^[.+] PHP Fatal error.+$ desc=PHP error action=add nginx-php-errors $0
type=Calendar time=* * * * * desc=Mail web errors context=nginx-php-errors action=report nginx-php-errors /bin/mail -s &amp;ldquo;example.com PHP errors&amp;rdquo; admin@example.com; delete nginx-php-errors; 
 启动配置 vim /etc/sysconfig/sec  SEC_ARGS[0]=&amp;ldquo;-detach &amp;ndash;conf=/etc/sec/php.conf &amp;ndash;input=/var/log/php-fpm/example.com-error.log -log=/var/log/sec -intevents -pid=/var/run/sec.pid &amp;ndash;debug=6&amp;rdquo;</description>
    </item>
    
    <item>
      <title>分区概念</title>
      <link>https://gofunbox.github.io/dev-partition/</link>
      <pubDate>Thu, 03 Aug 2017 09:27:23 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/dev-partition/</guid>
      <description>首先我们需要知道，硬盘分区的存在，是由硬盘的物理特性决定的，并不会因为操作系统的不同而有所改变。
如果您需要Linux，您首先需要找到一本书名为《linux》的书，书名相当于硬盘中的MBR，也就是主引导纪录。不同的是，MBR可以是几个书名合在一起，类似于《XX合订本》。这部分内容暂时还没有什么实用价值，您只需要大概的了解。
而正文，就是硬盘中纪录的数据，这也非常容易理解，且对于安装系统并没有什么影响，所以现在我们来了解目录:
目录相当于硬盘中的分区表，书中的每一个章节，相当于硬盘中的一个分区，它起始和结束的页次，都可以在目录中找到。试想，如果阅读一本撕掉目录的书，您将很难找到您想阅读的部分。同样，如果没有分区表，操作系统也不能够在硬盘上定位数据的位置。
由于历史的原因，硬盘中的分区表大小受到了限制，最多只可以容纳四个分区（主分区）。如果一本书，它的目录最多只能有四个章节，那不是太可怕了么？很多书的内容远远不止四个章节啊！
于是聪明的人们想到了一个变通的办法，就是利用其中的一个章节，来存储其它部分的目录。比如第一章是前言，第二章是其它部分的目录，我们翻到第二章，呵呵，这里是第二个目录，因为只有第一个目录受四个章节的限制，所以这个目录的内容可以非常的详尽。第二个目录就是分区表中的扩展分区了，其中定义的章节，就是硬盘中的逻辑分区，不是很难理解吧？
明白了这一点，我们来看看Linux和Windows对于分区不同的表示方法：
可能您已经很熟悉Windows了，它使用盘符来表示分区，比如 C: D: E: ，每一个分区使用一个盘符来标识，而且顺序可以颠倒， D: 并不一定就是您系统中的第二个分区。（如果您给第二个分区分配最后一个硬盘盘符，把所有的盘符按顺序排列好，并且重装一次系统，您就会理解什么叫作“头疼”了）
而在Linux中，分区是这样表示的
/dev/hda /dev/hda1 /dev/hda2 /dev/hda5 /dev/sdb1  以 /dev/hda5 为例:
因为在Linux中，每一个设备都是用 /dev/ 文件夹下的一个文件来表示，所以 /dev/hda5 中， /dev/ 表示的是根目录下的dev目录，我们来看剩下的部分 hda5 。
前两位的字母 hd 表示这是一块IDE硬盘，如果是 sd ，则代表SATA硬盘，或者闪存等外设。
第三位的字母 a 表示这是该类型接口上的第一个设备。同理， b、c、d…… 分别代表该类型接口上的第二三四……个设备。例如 hdc 表示第二个IDE接口上的主硬盘（每个IDE接口上允许一个主设备和一个从设备）。
第四位的数字 5 ，并不表示这是该硬盘中的第5个分区，而是第一个逻辑分区。因为在Linux中，为了避免不必要的混乱，分区的顺序是不能改变的，分区标识则由它们在硬盘中的位置决定。系统又要为所有可能的主分区预留标识，所以 1-4 一定不会是逻辑分区， 5 则是第一个逻辑分区，以此类推。
/dev/hda1 第一块硬盘的第一主分区 /dev/hdb5 第二块硬盘的第一逻辑分区 /dev/sda4 第一块 SATA 硬盘的第四主分区，或者扩展分区 /dev/null 黑洞设备  挂载分区 https://i.linuxtoy.org/docs/guide/ch08s02.html</description>
    </item>
    
    <item>
      <title>标准编译安装</title>
      <link>https://gofunbox.github.io/gcc-install/</link>
      <pubDate>Thu, 03 Aug 2017 08:30:26 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/gcc-install/</guid>
      <description>为什么要编译安装 包管理系统是绝大多数发行版的必备组件，也是一个发行版区别于其它发行版的主要特征。但是有些软件，并不能通过包管理系统安装，这就需要下载源码编译安装。
一个软件可能有许多功能，但是发行版中提供的安装包，通常只具有一些常见的功能。如果提供所有功能，那么无疑会占用更多的资源，而这些功能，大多数用户不会用到；而你会用到的功能，可能安装包中刚好没有。编译安装可以灵活地定制软件，选择自己需要的，取消自己不需要的。
编译安装还可以针对特定的硬件进行优化，以获得更好的性能表现。
编译环境 编译环境包括多个工具，它们环环相扣，称作编译工具链。主要包括以下工具：
   工具 简介     binutils 连接器、汇编器和其他用于目标文件和档案的工具   gcc 编译器，将源代码转换为机器代码   glibc C库，提供标准例程(C函数)   还有一些工具，能够调用工具链，实现自动化编译：    autoconf 自动生成 Makefile 文件   automake 自动生成 Makefile 文件   make 按照 Makefile 文件中的规则编译程序    标准编译安装 首先，下载源代码，通常是压缩包，如：xxx.tar.gz 或者 xxx.tar.bz2，解包：
   压缩包格式 命令     .tar.gz tar zxvf xxx.tgz   .</description>
    </item>
    
    <item>
      <title>Linux服务启动介绍</title>
      <link>https://gofunbox.github.io/linux-boot/</link>
      <pubDate>Wed, 26 Jul 2017 07:13:35 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux-boot/</guid>
      <description>启动流程  读取 MBR (主引导记录Master Boot Record)的信息，启动 Boot Manager 加载系统内核，启动 init进程 init进程 读取 /etc/inittab 文件中的信息，并进入预设的运行级别，按顺序运行该运行级别对应文件夹下的脚本。脚本通常以 start选项启动，并指向一个系统中的程序。 根据 /etc/rcS.d/文件夹中对应的脚本启动 Xwindow 服务器 xorg 启动登录管理器，等待用户登录  Windows 使用 NTLDR 作为 Boot Manager，如果您的系统中安装多个版本的 Windows，您就需要在 NTLDR 中选择您要进入的系统。 Linux 通常使用功能强大，配置灵活的 GRUB 作为 Boot Manager。 init进程 是 Linux 的根进程，所有的系统进程都是它的子进程。 通常情况下， /etc/rcS.d/ 目录下的启动脚本首先被执行，然后是 /etc/rcN.d/ 目录。例如您设定的运行级别为 3,那么它对应的启动目录为 /etc/rc3.d/ 。 Xwindow 为 Linux 下的图形用户界面系统。 大多 Linux 系统默认使用 GDM 作为登录管理器，您在登录管理器界面中输入用户名和密码后，便可以登录系统。（您可以在 /etc/rc3.d/ 文件夹中找到一个名为 S13gdm 的链接）   更改运行级别 在 /etc/inittab 文件中找到如下内容：</description>
    </item>
    
    <item>
      <title>Linux配置文件说明</title>
      <link>https://gofunbox.github.io/linux-etc/</link>
      <pubDate>Wed, 26 Jul 2017 07:11:41 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux-etc/</guid>
      <description>组   文件路径   说明     系统初始化   /etc/inittab   运行级别、控制台数量       /etc/timezone   时区       /etc/inetd.conf   超级进程     文件系统   /etc/fstab   开机时挂载的文件系统       /etc/mtab   当前挂载的文件系统     用户系统   /etc/passwd   用户信息       /etc/shadow   用户密码       /etc/group   群组信息       /etc/gshadow   群组密码       /etc/sudoers   Sudoer 列表     Shell   /etc/shell   可用 Shell 列表       /etc/inputrc   ReadLine 控件设定       /etc/profile   用户首选项       /etc/bash.</description>
    </item>
    
    <item>
      <title>Linux操作系统目录简介</title>
      <link>https://gofunbox.github.io/linux_directory/</link>
      <pubDate>Wed, 26 Jul 2017 00:41:31 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux_directory/</guid>
      <description>Linux 系统中的目录    目录   说明     /   根目录，万物起源。     /bin   包含系统启动和运行所必须的二进制程序。     /boot   包含 Linux 内核、初始 RAM 磁盘映像（用于启动时所需的驱动）和 启动加载程序。有趣的文件：
 /boot/grub/grub.conf or menu.lst， 被用来配置启动加载程序。
/boot/vmlinuz，Linux 内核。    /dev   这是一个包含设备结点的特殊目录。“一切都是文件”，也适用于设备。 在这个目录里，内核维护着所有设备的列表。     /etc   这个目录包含所有系统层面的配置文件。它也包含一系列的 shell 脚本， 在系统启动时，这些脚本会开启每个系统服务。这个目录中的任何文件应该是可读的文本文件。
 有趣的文件：虽然/etc 目录中的任何文件都有趣，但这里只列出了一些我一直喜欢的文件：  /etc/crontab， 定义自动运行的任务。</description>
    </item>
    
    <item>
      <title>Linux free命令查看内存情况学习小记</title>
      <link>https://gofunbox.github.io/linux_command_free/</link>
      <pubDate>Tue, 14 Jun 2016 01:53:04 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux_command_free/</guid>
      <description>最近项目碰到php-fpm占用太多内存的情况，为了深入了解其原因，开始学习os相关的内存知识，记录备忘下
1 2 3 4 5 6 1 total used free shared buffers cached 2 Mem: 24677460 23276064 1401396 0 870540 12084008 3 -/+ buffers/cache: 10321516 14355944 4 Swap: 25151484 224188 24927296  第二行(mem)，从OS的角度来看，因为对于OS，buffers/cached 都是属于被使用，所以他的可用内存是1401396KB,已用内存是24677460KB,其中包括，内核（OS）使用+Application(X,oracle,etc)使用的+buffers+cached。
total:总计物理内存的大小。
used:已使用多大。
free:可用有多少。
Shared:多个进程共享的内存总额，现在已经deprecated，其值总是0（当然在一些系统上也可能不是0，主要取决于free命令是怎么实现的）。
Buffers/cached:磁盘缓存的大小，FO[2][5]表示被OS buffer住的内存。FO[2][6]表示被OS cache的内存。在有些时候buffer和cache这两个词经常混用。不过在一些比较低层的软件里是要区分这两个词的，看老外的洋文:
 _A buffer is something that has yet to be &amp;#8220;written&amp;#8221; to disk.
_ A cache is something that has been &amp;#8220;read&amp;#8221; from the disk and stored for later use.</description>
    </item>
    
    <item>
      <title>Nginx安装lua-nginx-module模块</title>
      <link>https://gofunbox.github.io/nginx_install_lua-nginx-module/</link>
      <pubDate>Fri, 25 Mar 2016 08:30:57 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/nginx_install_lua-nginx-module/</guid>
      <description>如果是还没有安装nginx的小伙伴可以直接下载openresty安装简单快捷，http://openresty.org/cn/installation.html
安装了nginx的小伙伴就继续往下看咯~
1.下载安装LuaJIT 2.1（2.0或者2.1都是支持的，官方推荐2.1）
http://luajit.org/download.html
wget http://luajit.org/download/LuaJIT-2.1.0-beta2.tar.gz tar zxf LuaJIT-2.1.0-beta2.tar.gz cd LuaJIT-2.1.0-beta2 make PREFIX=/usr/local/luajit make install PREFIX=/usr/local/luajit  2.下载最新的ngx_devel_kit（NDK）模块
https://github.com/simpl/ngx_devel_kit/tags
wget https://github.com/simpl/ngx_devel_kit/archive/v0.2.19.tar.gz tar -xzvf v0.2.19.tar.gz  3.下载最新的lua-nginx-module 模块
https://github.com/openresty/lua-nginx-module/tags
wget https://github.com/openresty/lua-nginx-module/archive/v0.10.2.tar.gz tar -xzvf v0.10.2.tar.gz  nginx -v看下nginx版本下载相同的版本源码，如果有了就进入源码目录不是安装目录哦
# tell nginx&#39;s build system where to find LuaJIT 2.1: export LUAJIT_LIB=/usr/local/luajit/lib export LUAJIT_INC=/usr/local/luajit/include/luajit-2.1  nginx -V看下之前的安装都带了哪些参数
./configure (之前安装的参数) --with-ld-opt=&#34;-Wl,-rpath,/usr/local/luajit/lib&#34; --add-module=/path/to/ngx_devel_kit --add-module=/path/to/lua-nginx-module --add-module后参数路径根据解压路径为准 make -j2 make install  4.验证lua-nginx-module安装是否成功
在nginx下配置
location /hello_lua { default_type &#39;text/plain&#39;; content_by_lua &#39;ngx.</description>
    </item>
    
    <item>
      <title>解决手动运行脚本执行正常而放入crontab后不正常的方法</title>
      <link>https://gofunbox.github.io/linux_crontab_error/</link>
      <pubDate>Wed, 22 Apr 2015 04:07:28 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/linux_crontab_error/</guid>
      <description>直接在crontab里面运行，有日志但是脚本有问题，没有写入文件
&amp;lt;span style=&#34;font-size: 12pt;&#34; 0 1 * * * /usr/local/php/bin/php /home/stock/index_cli.php&amp;lt;/span  也保证下写入文件夹的权限，还是不行
直接运行，就正常运行
&amp;lt;span style=&#34;font-size: 12pt;&#34;/usr/local/php/bin/php /home/stock/index_cli.php&amp;lt;/span  
最后网络上找说是有可能是相对路径的问题，就改成
&amp;lt;span style=&#34;font-size: 12pt;&#34;0 1 * * * sh /home/stock/stock.sh&amp;lt;/span  stock.sh代码如下
&amp;lt;span style=&#34;font-size: 12pt;&#34;cd /home/stock/ /usr/local/php/bin/php /home/stock/index_cli.php&amp;lt;/span  先cd到执行脚本路径下就可以正常执行了
也找到一个帖子解决方法不过貌似不适用我这个情况，不过大家也可以看看
http://segmentfault.com/a/1190000000768446</description>
    </item>
    
    <item>
      <title>安装tcpcopy/intercept configure checking for pcap.h not found错误解决方法</title>
      <link>https://gofunbox.github.io/tcpcopy/intercept_configure_checking_for_pcap.h_not_found</link>
      <pubDate>Mon, 19 Jan 2015 14:53:01 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/tcpcopy/intercept_configure_checking_for_pcap.h_not_found</guid>
      <description>安装tcpcopy的时候很顺利
在安装intercept的时候
敲./configure
报错checking for pcap.h &amp;#8230; not found
网上貌似说的人不多
这里记录下
yum install libpcap-devel 即可解决</description>
    </item>
    
    <item>
      <title>nginx1.6添加第三方模块nginx_concat_module合并http请求</title>
      <link>https://gofunbox.github.io/nginx_concat_module_combine_http/</link>
      <pubDate>Mon, 01 Dec 2014 02:41:04 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/nginx_concat_module_combine_http/</guid>
      <description>1.安装nginx_concat_module
存放模块的路径下
svn checkout http://code.taobao.org/svn/nginx_concat_module/trunk nginx_concat_module  前提要安装过svn

然后下载nginx 我下的是1.6版的
解压切换至解压目录
./configure --add-module=/刚才存放的路径/nginx_concat_module make &amp;&amp; make install  2.配置nginx_concat_module
打开需要配置网站的nginx vhost配置文件加入
location /resource/ { concat on; concat_max_files 10; concat_unique on; concat_types text/html,application/x-javascript,text/css; }  重启nginx，大功告成，没有压缩有点遗憾，毕竟很久没有维护了
http://shopncdemo2.fanhefan.com/resource/js/??jquery.js,common.js,jquery-ui/jquery.ui.js
大家也可以试试https://github.com/lanrenwo/icombo功能更强大些，不过不知道是否稳定哦~</description>
    </item>
    
    <item>
      <title>常用linux命令</title>
      <link>https://gofunbox.github.io/useful_linux_command/</link>
      <pubDate>Wed, 22 Oct 2014 03:51:06 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/useful_linux_command/</guid>
      <description>记忆力捉急，就写下来吧，还是喜欢复制粘贴流
系统
# uname -a # 查看内核/操作系统/CPU信息 # head -n 1 /etc/issue # 查看操作系统版本 # cat /proc/cpuinfo # 查看CPU信息 # hostname # 查看计算机名 # lspci -tv # 列出所有PCI设备 # lsusb -tv # 列出所有USB设备 # lsmod # 列出加载的内核模块 # env # 查看环境变量 # /sbin/sysctl -p # 编辑/etc/sysctl.conf不需要重启更新  资源
# free -m # 查看内存使用量和交换区使用量 # df -h # 查看各分区使用情况 # du -sh &amp;lt;目录名 # 查看指定目录的大小 # grep MemTotal /proc/meminfo # 查看内存总量 # grep MemFree /proc/meminfo # 查看空闲内存量 # uptime # 查看系统运行时间、用户数、负载 # cat /proc/loadavg # 查看系统负载 # find &amp;lt;目录名 -type f -name &#34;</description>
    </item>
    
    <item>
      <title>通过DenyHosts阻止SSH暴力攻击教程</title>
      <link>https://gofunbox.github.io/denyhosts_thwart_ssh_server_attacks/</link>
      <pubDate>Mon, 18 Aug 2014 15:05:35 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/denyhosts_thwart_ssh_server_attacks/</guid>
      <description>Denyhosts是一个Linux系统下阻止暴力破解SSH密码的软件，它的原理与DDoS Deflate类似，可以自动拒绝过多次数尝试SSH登录的IP地址，防止互联网上某些机器常年破解密码的行为，也可以防止黑客对SSH密码进行穷举。
众所周知，暴露在互联网上的计算机是非常危险的。并不要因为网站小，关注的人少或不惹眼就掉以轻心：互联网中的大多数攻击都是没有目的性的，黑客们 通过大范围IP端口扫描探测到可能存在漏洞的主机，然后通过自动扫描工具进行穷举破解。笔者的某台服务器在修改SSH 22号端口之前，平均每天接受近百个来自不同IP的连接尝试。而DenyHosts正是这样一款工具。下文将对该工具的安装与使用方法进行介绍。
DenyHosts阻止攻击原理 DenyHosts会自动分析/var/log/secure 等安全日志文件，当发现异常的连接请求后，会自动将其IP加入到 /etc/hosts.deny 文件中，从而达到阻止此IP继续暴力破解的可能。同时，Denyhosts还能自动在一定时间后对已经屏蔽的IP地址进行解封，非常智能。
官方网站 Denyhosts的官方网站为：http://denyhosts.sourceforge.net/（杜绝Putty后门事件，谨记安全软件官网）
安装方法 1、下载DenyHosts源码并解压（目前最新版为2.6）
[root@www ~]# wget http://sourceforge.net/projects/denyhosts/files/denyhosts/2.6/DenyHosts-2.6.tar.gz [root@www ~]# tar zxvf DenyHosts-2.6.tar.gz [root@www ~]# cd DenyHosts-2.6  2、安装部署
[root@www DenyHosts-2.6]# yum install python -y [root@www DenyHosts-2.6]# python setup.py install  3、准备好默认的配置文件
[root@www DenyHosts-2.6]# cd /usr/share/denyhosts/ [root@www denyhosts]# cp denyhosts.cfg-dist denyhosts.cfg [root@www denyhosts]# cp daemon-control-dist daemon-control  4、编辑配置文件denyhosts.cfg
[root@www denyhosts]# vi denyhosts.cfg  该配置文件结构比较简单，简要说明主要参数如下：
 PURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如3m（三分钟）、5h（5小时）、2d（两天）、8w（8周）、1y（一年）；
PURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；
BLOCK_SERVICE：需要阻止的服务名；
DENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；</description>
    </item>
    
    <item>
      <title>Centos如何挂载硬盘</title>
      <link>https://gofunbox.github.io/centos_mount_disk/</link>
      <pubDate>Thu, 12 Sep 2013 07:02:34 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/centos_mount_disk/</guid>
      <description>远程SSH登录上Centos服务器后，进行如下操作
提醒：挂载操作会清空数据，请确认挂载盘无数据或者未使用
第一步：列出所有磁盘 命令： ll /dev/disk/by-path

提示：如果无法确认数据盘设备名称，请使用df命令来确认系统盘的名称，从而排除挂错盘的情况。
第二步：格式化硬盘 命令： fdisk /dev/sdb

注意：图中箭头标注处续手动键入
第三步：创建分区  命令： mkfs.ext4 /dev/sdb1

第四步：挂载分区 命令： mkdir /data
mount /dev/sdb1 /data # 将sdb这个硬盘挂载成为/data

**第五步：将信息写入fstab,让系统开启自动挂载。
** 命令： echo &amp;#8220;/dev/sdb1 /data ext4 defaults 0 0&amp;#8221; &amp;gt;&amp;gt; /etc/fstab</description>
    </item>
    
    <item>
      <title>Linux SSH常用命令</title>
      <link>https://gofunbox.github.io/519.html</link>
      <pubDate>Mon, 11 Mar 2013 05:17:06 +0000</pubDate>
      
      <guid>https://gofunbox.github.io/519.html</guid>
      <description>目录操作：
rm -rf mydir /删除mydir目录/
mkdir dirname /创建名为dirname的目录/
cd mydir /进入mydir目录/
cd &amp;#8211; /回上一级目录/
cd .. /回父目录，中间有空格/
cd ~ /回根目录/
mv tools tool /*把tools目录改名为tool */
ln -s tool bac /给tool目录创建名为bac的符号链接,最熟悉的应该就是FTP中www链接到public_html目录了/
cp -a tool /home/vpser/www /*把tool目录下所有文件复制到www目录下 */
文件操作：
rm go.tar /* 删除go.tar文件 /
find mt.cgi / 查找文件名为mt.cgi的文件 /
df –h / 查看磁盘剩余空间,好像没这个必要，除非你太那个了 */
解压缩：
tar xvf wordpress.tar /* 解压tar格式的文件 /
tar -tvf myfile.tar / 查看tar文件中包含的文件 */
tar cf toole.tar tool /* 把tool目录打包为toole.</description>
    </item>
    
  </channel>
</rss>