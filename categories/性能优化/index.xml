<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能优化 on Funbox的技术记事本</title>
    <link>https://ifunbox.top/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 性能优化 on Funbox的技术记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 12 Oct 2015 07:25:01 +0000</lastBuildDate>
    
	<atom:link href="https://ifunbox.top/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>wordpress数据库posts文章表优化</title>
      <link>https://ifunbox.top/optimize_wordpress_posts_table/</link>
      <pubDate>Mon, 12 Oct 2015 07:25:01 +0000</pubDate>
      
      <guid>https://ifunbox.top/optimize_wordpress_posts_table/</guid>
      <description>wordpress数据库wp_posts文章表结构中post_content,post_title,post_excerpt,to_ping,pinged,post_content_filtered这几个字段的字段类型差点没把我吓死，都是longtext,mediumtext类型，非常占用存储空间不说，还占用传输带宽影响速度。
首先用下面这条sql语句分析下当前表数据情况，找出每个字段下最长的字符串数
SELECT MAX(LENGTH(字段名)) from wp_posts
字段名换成post_content,post_title,post_excerpt,to_ping,pinged,post_content_filtered依次搜索几下每个的最大长度
得出如我的wordpress数据库posts文章表优化建议:
post_content字段类型改成mediumtext
post_title字段类型改成varchar(255)
post_excerpt字段类型改成varchar(255)
to_ping字段类型改成varchar(50)
pinged字段类型改成varchar(100)
post_content_filtered字段类型改成varchar(50)
注:修改前先记得备份，以免数据被截了，优化因人而异，方法是一样的~~
优化前后 分析下SELECT * from wpasbfd_posts语句在Sending data的耗时就减少很多~~
最后说一句，如果优化完升级了wordpress需要再次优化哦，因为升级会把之前改的数据结构还原~~</description>
    </item>
    
    <item>
      <title>Memcached的CAS (Check And Set) 协议</title>
      <link>https://ifunbox.top/memcached_cas/</link>
      <pubDate>Wed, 26 Aug 2015 10:35:09 +0000</pubDate>
      
      <guid>https://ifunbox.top/memcached_cas/</guid>
      <description>最近无意中翻阅到大牛讲解微信红包实现的文章，文中提到CAS，这是啥的，能不能不用简称，查了半天终于找到了，下面总结下备忘~
1. 什么是CAS协议
很多中文的资料都不会告诉大家CAS的全称是什么，不过一定不要把CAS当作中国科学院（China Academy of Sciences）的缩写。Google.com一下，CAS是什么？CAS是Check And Set的缩写。
2. CAS协议原文
http://code.sixapart.com/svn/memcached/trunk/server/doc/protocol.txt
3. CAS的基本原理
基本原理非常简单，一言以蔽之，就是“版本号”。每个存储的数据对象，多有一个版本号。我们可以从下面的例子来理解：
如果不采用CAS，则有如下的情景：
第一步，A取出数据对象X；
第二步，B取出数据对象X；
第三步，B修改数据对象X，并将其放入缓存；
第四步，A修改数据对象X，并将其放入缓存。
我们可以发现，第四步中会产生数据写入冲突。
如果采用CAS协议，则是如下的情景。
第一步，A取出数据对象X，并获取到CAS-ID1；
第二步，B取出数据对象X，并获取到CAS-ID2；
第三步，B修改数据对象X，在写入缓存前，检查CAS-ID与缓存空间中该数据的CAS-ID是否一致。结果是“一致”，就将修改后的带有CAS-ID2的X写入到缓存。
第四步，A修改数据对象Y，在写入缓存前，检查CAS-ID与缓存空间中该数据的CAS-ID是否一致。结果是“不一致”，则拒绝写入，返回存储失败。
这样CAS协议就用了“版本号”的思想，解决了冲突问题。</description>
    </item>
    
    <item>
      <title>避免SESSION锁阻塞请求</title>
      <link>https://ifunbox.top/avoid_session_lock/</link>
      <pubDate>Thu, 12 Feb 2015 06:38:36 +0000</pubDate>
      
      <guid>https://ifunbox.top/avoid_session_lock/</guid>
      <description>这篇文章是对我上一篇文章的深入研究php-fpm-slow.log慢日志频繁出现session_start()，也是对阻挡的效果的体会。
问题的开始是fpm-slow-log出现很多session_start()，单纯的认为是硬盘读写问题是错误的，只怪当时太年轻。
翻到了这两篇文章
http://konrness.com/php5/how-to-prevent-blocking-php-requests/
http://www.leaseweblabs.com/2014/08/session-locking-non-blocking-read-sessions-php/
介绍了什么是session lock，怎么工作，为什么需要，如何避免阻塞。
决定自己动手体验下。
准备两段测试代码。
test.html
&amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=1&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=2&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=3&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=4&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=5&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=6&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=7&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=8&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=9&amp;quot;&amp;gt; &amp;lt;img src=&amp;ldquo;https://ifunbox.top/demo/session_start_test/test.php?v=10&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
 &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;test.php&amp;lt;/span&amp;gt; &amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;php&amp;quot;&amp;gt; &amp;amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;&amp;amp;lt;?php session_start(); $_SESSION[&#39;latestRequestTime&#39;] = time(); //session_write_close(); sleep(2); $twitterId = $_SESSION[&#39;latestRequestTime&#39;]; echo json_encode($twitterId); ?&amp;amp;gt;&amp;amp;lt;/span&amp;gt;  1.我们先在火狐上访问test.html，里面有10个php请求到test.php。
效果如下图，因为火狐默认6个并发连接，所以前6个请求是木有阻隔的，但是由于session lock的原因，每个请求时间都比上一个晚2S，必须等上一个请求释放session lock。第7个请求就被阻隔了2S，因为要等第一个请求被释放嘛，O(∩_∩)O~

2.然后去除test.php中session_write_close();前面的注释
再用火狐上访问test.html，效果如下图。发现前面6个请求，不需要等待上一个请求结束，已经并行了，是因为session_write_close()释放了session lock的原因。

3.我们下载火狐附加组件Tweak network修改并行连接数为10，

然后注释掉之前去除注释的代码访问test.html。效果如下。阻隔条消失，所以网络上有一些浏览器优化配置其实就是调大的并发连接数来加速网页js，php，图片的加载。

到这里对session lock阻塞就大致明白了。
回过头解决问题了，我回想了自己项目的应用场景好多ajax加载界面甚至有ajax定时刷新，难道这个是罪魁祸首！
于是乎就把涉及到的ajax接口不需要用session的就不session_start()，不需要写入session的就在session_start()后直接加入session_write_close()，需要写入session的，写入session后加入session_write_close()。</description>
    </item>
    
    <item>
      <title>php-fpm-slow.log慢日志频繁出现session_start()</title>
      <link>https://ifunbox.top/slow_log_session_start/</link>
      <pubDate>Wed, 11 Feb 2015 06:09:54 +0000</pubDate>
      
      <guid>https://ifunbox.top/slow_log_session_start/</guid>
      <description>最近项目php-fpm-slow.log慢日志中经常出现以下的记录

php自带函数session_start()
打开php.ini查看了下session.save_handler参数，默认配置的是file，本能反应猜测是否影响读写的问题，索性配置成memcache试试吧。配置改成
session.save_handler = memcache
session.save_path = &amp;#8220;tcp://127.0.0.1:11211&amp;#8221;
然后php-fpm reload下，网站正常运行。
查看下mc里面出现一大堆以sessionid为key的值

截止目前慢日志不在出现 session_start()了
阿里云的硬盘读写真的是那么水咩，之后再研究分析下~~
&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;
&amp;nbsp;
经过一段时间的分析观察，很不幸上面的方法不能根本解决请移步https://ifunbox.top/970.html
还有阿里云的硬盘读写还过得去</description>
    </item>
    
    <item>
      <title>安装tcpcopy/intercept configure checking for pcap.h not found错误解决方法</title>
      <link>https://ifunbox.top/tcpcopy/intercept_configure_checking_for_pcap.h_not_found</link>
      <pubDate>Mon, 19 Jan 2015 14:53:01 +0000</pubDate>
      
      <guid>https://ifunbox.top/tcpcopy/intercept_configure_checking_for_pcap.h_not_found</guid>
      <description>安装tcpcopy的时候很顺利
在安装intercept的时候
敲./configure
报错checking for pcap.h &amp;#8230; not found
网上貌似说的人不多
这里记录下
yum install libpcap-devel 即可解决</description>
    </item>
    
    <item>
      <title>TIME_WAIT过多导致负载爆表优化方法</title>
      <link>https://ifunbox.top/optimize_linux_time_wait/</link>
      <pubDate>Sun, 04 Jan 2015 11:34:01 +0000</pubDate>
      
      <guid>https://ifunbox.top/optimize_linux_time_wait/</guid>
      <description>&lt;div id=&#34;cnblogs_post_body&#34;&gt;
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;最近参与的项目每日大概有300w的请求量，8核的服务器负载竟然最高可以跑到20，给跪了&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;查看TCP状态：netstat -n | awk &amp;#8216;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&amp;#8217;&lt;/span&gt;&lt;br /&gt; &lt;span style=&#34;font-size: 12pt;&#34;&gt; TIME_WAIT 有5000，ESTABLISHED有500左右&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;摸不着头脑，随意百度了下TIME_WAIT过多&lt;/span&gt;&lt;br /&gt; &lt;span style=&#34;font-size: 12pt;&#34;&gt; 发现TIME_WAIT状态的socket一般需要等到2msl时间后，socket才会被回收，TIME_WAIT过多会影响服务器性能&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;解决TIME_WAIT过多的方法&lt;br /&gt; 修改(添加)系统内核参数:/etc/sysctl.conf&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;#改系統默认的TIMEOUT时间&lt;/span&gt;&lt;br /&gt; &lt;span style=&#34;font-size: 12pt;&#34;&gt; net.ipv4.tcp_fin_timeout=30&lt;br /&gt; #启重用,允许将TIME-WAIT sockets重新用于新的TCP连接 默认为0表示关闭&lt;/span&gt;&lt;br /&gt; &lt;span style=&#34;font-size: 12pt;&#34;&gt; net.ipv4.tcp_tw_reuse=1&lt;br /&gt; #开启TCP连接中TIME-WAIT sockets的快速回收 默认为0 表示关闭&lt;/span&gt;&lt;br /&gt; &lt;span style=&#34;font-size: 12pt;&#34;&gt; net.ipv4.tcp_tw_recycle=1&lt;/span&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;span style=&#34;font-size: 12pt;&#34;&gt;使新增参数生效：sysctl -p&lt;/span&gt;
  &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx1.6添加第三方模块nginx_concat_module合并http请求</title>
      <link>https://ifunbox.top/nginx_concat_module_combine_http/</link>
      <pubDate>Mon, 01 Dec 2014 02:41:04 +0000</pubDate>
      
      <guid>https://ifunbox.top/nginx_concat_module_combine_http/</guid>
      <description>1.安装nginx_concat_module
存放模块的路径下
svn checkout http://code.taobao.org/svn/nginx_concat_module/trunk nginx_concat_module
 &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;前提要安装过svn&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;然后下载nginx 我下的是1.6版的&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;font-size: 12pt;&amp;quot;&amp;gt;解压切换至解压目录&amp;lt;/span&amp;gt; &amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;html&amp;quot;&amp;gt; ./configure --add-module=/刚才存放的路径/nginx_concat_module make &amp;amp;&amp;amp; make install  2.配置nginx_concat_module
打开需要配置网站的nginx vhost配置文件加入
location /resource/ { concat on; concat_max_files 10; concat_unique on; concat_types text/html,application/x-javascript,text/css; } ```
重启nginx，大功告成，没有压缩有点遗憾，毕竟很久没有维护了
http://shopncdemo2.fanhefan.com/resource/js/??jquery.js,common.js,jquery-ui/jquery.ui.js
大家也可以试试https://github.com/lanrenwo/icombo功能更强大些，不过不知道是否稳定哦~</description>
    </item>
    
    <item>
      <title>pagespeed超级智能的谷歌网页优化利器</title>
      <link>https://ifunbox.top/google_pagespeed_website_optimizer/</link>
      <pubDate>Tue, 25 Nov 2014 07:55:47 +0000</pubDate>
      
      <guid>https://ifunbox.top/google_pagespeed_website_optimizer/</guid>
      <description>最近做了一个项目，由于css,js优化不到位，导致首次打开页面特别的慢
用火狐查看，大部分js，css大部分时间耗在阻挡上面。
查了相关资料，这样解释阻挡(Blocking)：每个浏览器有并发连接数量的上限（例如Firefox对每个host限制6个连接），如果当前建立的连接数已经超过上限，那么其余该请求会被阻塞，等待新的可以用的连接。
也就是多js，css太多了，那着手合并一下。
先是找了淘宝的combo，其实就可以满足现在我的需求，但是无意间发现了pagespeed
被其强大的功能所震惊了，而且是代码层面不需要任何修改
功能介绍页http://ngxpagespeed.com/ngx_pagespeed_example/
功能点
 图像优化：剥离元数据、动态调整，重新压缩 CSS 和 JavaScript 压缩、级联、内联 小资源内联 延迟图像和 JavaScript 加载 HTML 重写 缓存周期延长  ng下安装pagespeed
https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source
ng下配置pagespeed
https://developers.google.com/speed/pagespeed/module/configuration
这是我的配置，开启combine_javascript貌似会影响网站js暂时先禁用了，估计是beta的原因
还有一个问题压缩合并js，css都有缓存，看了文档貌似没有提缓存时间的问题
如果需要刷新缓存，我是用重启nginx的方法
pagespeed on; pagespeed RespectVary on; pagespeed FileCachePath /var/ngx_pagespeed_cache; pagespeed RewriteLevel CoreFilters; pagespeed DisableFilters combine_javascript; #pagespeed EnableFilters combine_css,sprite_images,combine_heads,collapse_whitespace,extend_cache,combine_javascript; location ~ &amp;ldquo;.pagespeed.([a-z].)?[a-z]{2}.[^.]{10}.[^.]+&amp;rdquo; { add_header &amp;ldquo;&amp;rdquo; &amp;ldquo;&amp;rdquo;; } location ~ &amp;ldquo;^/pagespeed_static/&amp;rdquo; { } location ~ &amp;ldquo;^/ngx_pagespeed_beacon$&amp;rdquo; { } ```
关于阻挡blocking的介绍
http://www.zhihu.com/question/24506110
http://ywwd.net/read-346</description>
    </item>
    
    <item>
      <title>Mysql慢查询和慢查询日志分析利器–mysqlsla</title>
      <link>https://ifunbox.top/mysqlsla_mysql_slow_log_analysis_tools/</link>
      <pubDate>Sun, 15 Jun 2014 14:51:32 +0000</pubDate>
      
      <guid>https://ifunbox.top/mysqlsla_mysql_slow_log_analysis_tools/</guid>
      <description>1.安装mysqlsla
wget http://hackmysql.com/scripts/mysqlsla-2.03.tar.gz tar zvxf mysqlsla-2.03.tar.gz cd mysqlsla-2.03 perl Makefile.PL make make install
 &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;perl Makefile.PL会报错，根据出错内容百度下都有相关信息，无非yum install一些东西&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;font-size: medium;&amp;quot;&amp;gt;2.使用mysqlsla语法&amp;lt;/span&amp;gt; &amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt; Slow log: mysqlsla -lt slow slow.log General log: mysqlsla -lt general general.log Binary log: mysqlbinlog bin.log | mysqlsla -lt binary -  常用参数说明：
1) -log-type (-lt) type logs:
通过这个参数来制定log的类型，主要有slow, general, binary, msl, udl,分析slow log时通过制定为slow.
2) -sort:
制定使用什么参数来对分析结果进行排序，默认是按照t_sum来进行排序。
t_sum:按总时间排序
c_sum:按总次数排序
c_sum_p: sql语句执行次数占总执行次数的百分比。
3) -top:
显示sql的数量，默认是10,表示按规则取排序的前多少条
4) –statement-filter (-sf) [+-][TYPE]:</description>
    </item>
    
  </channel>
</rss>